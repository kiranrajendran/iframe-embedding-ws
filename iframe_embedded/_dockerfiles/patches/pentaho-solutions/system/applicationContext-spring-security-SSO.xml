<?xml version="1.0" encoding="UTF-8"?>
<!--+
  | Application context containing FilterChainProxy.
  +-->
  <!-- GN - CHANGED -->
<beans xmlns="http://www.springframework.org/schema/beans" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:pen="http://www.pentaho.com/schema/pentaho-system"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd
                           http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.1.xsd
                           http://www.pentaho.com/schema/pentaho-system http://www.pentaho.com/schema/pentaho-system.xsd" 
       default-lazy-init="true">



<!-- ========  Overwrite filter chain to add ssoProcessingFilter -->

  <!--
      if you wish to use channel security, add "channelProcessingFilter," in
      front of "httpSessionContextIntegrationFilter" in the list below
  -->
  <bean id="filterChainProxy" class="org.springframework.security.web.FilterChainProxy">
    <constructor-arg>
      <util:list>
        <!--
           You can safely remove the first pattern starting with /content/dashboards/print, if you're not using
           Enterprise Dashboards or not allowing printing of Dashboards,
        -->
		<sec:filter-chain pattern="/api/repos/dashboards/print" filters="securityContextHolderAwareRequestFilter,httpSessionPentahoSessionContextIntegrationFilter,httpSessionContextIntegrationFilter,preAuthenticatedSecurityFilter,httpSessionReuseDetectionFilter,logoutFilter,authenticationProcessingFilter,basicProcessingFilter,SSOProcessingFilter,requestParameterProcessingFilter,anonymousProcessingFilter,sessionMgmtFilter,exceptionTranslationFilter,filterInvocationInterceptor" />
        <sec:filter-chain pattern="/webservices/**" filters="securityContextHolderAwareRequestFilterForWS,httpSessionPentahoSessionContextIntegrationFilter,httpSessionContextIntegrationFilter,basicProcessingFilter,SSOProcessingFilter,anonymousProcessingFilter,sessionMgmtFilter,exceptionTranslationFilterForWS,filterInvocationInterceptorForWS" />
        <sec:filter-chain pattern="/api/repos/**" filters="securityContextHolderAwareRequestFilterForWS,httpSessionPentahoSessionContextIntegrationFilter,httpSessionContextIntegrationFilter,basicProcessingFilter,SSOProcessingFilter,requestParameterProcessingFilter,anonymousProcessingFilter,sessionMgmtFilter,exceptionTranslationFilterForWS,filterInvocationInterceptorForWS,preFlightFilter" />
        <sec:filter-chain pattern="/api/**" filters="securityContextHolderAwareRequestFilterForWS,httpSessionPentahoSessionContextIntegrationFilter,httpSessionContextIntegrationFilter,basicProcessingFilter,SSOProcessingFilter,requestParameterProcessingFilter,anonymousProcessingFilter,sessionMgmtFilter,exceptionTranslationFilterForWS,filterInvocationInterceptorForWS" />
        <sec:filter-chain pattern="/plugin/reporting/api/jobs/**" filters="securityContextHolderAwareRequestFilterForWS,httpSessionPentahoSessionContextIntegrationFilter,httpSessionContextIntegrationFilter,basicProcessingFilter,SSOProcessingFilter,requestParameterProcessingFilter,anonymousProcessingFilter,sessionMgmtFilter,exceptionTranslationFilterForWS,filterInvocationInterceptorForWS,preFlightFilter" />
        <sec:filter-chain pattern="/plugin/**" filters="securityContextHolderAwareRequestFilterForWS,httpSessionPentahoSessionContextIntegrationFilter,httpSessionContextIntegrationFilter,basicProcessingFilter,SSOProcessingFilter,requestParameterProcessingFilter,anonymousProcessingFilter,sessionMgmtFilter,exceptionTranslationFilterForWS,filterInvocationInterceptorForWS" />
        <sec:filter-chain pattern="/**" filters="securityContextHolderAwareRequestFilter,httpSessionPentahoSessionContextIntegrationFilter,httpSessionContextIntegrationFilter,httpSessionReuseDetectionFilter,logoutFilter,authenticationProcessingFilter,basicProcessingFilter,SSOProcessingFilter,requestParameterProcessingFilter,anonymousProcessingFilter,sessionMgmtFilter,exceptionTranslationFilter,filterInvocationInterceptor" />
      </util:list>
    </constructor-arg>
  </bean>
   
   
   <!-- ========  Overwrite to add ssoAuthProvider -->

  <bean id="defaultAuthenticationEventPublisher" class="org.springframework.security.authentication.DefaultAuthenticationEventPublisher">
  </bean>

  <bean id="authenticationManager" class="org.springframework.security.authentication.ProviderManager">
    <constructor-arg>
      <util:list>
        <pen:bean class="org.springframework.security.authentication.AuthenticationProvider"/>
		<ref bean="SSOAuthenticationProvider" />
        <ref bean="anonymousAuthenticationProvider" />
		<pen:bean class="org.springframework.security.authentication.AuthenticationProvider">
			<pen:attributes>
				<pen:attr key="providerName" value="jackrabbit"/>
			</pen:attributes>
		</pen:bean>
      </util:list>
    </constructor-arg>
    <property name="authenticationEventPublisher">
      <ref bean="defaultAuthenticationEventPublisher" />
    </property>    <property name="eraseCredentialsAfterAuthentication" value="false" />
  </bean> 
   
    <bean id="SSOAuthenticationProvider" class="com.pentaho.sample.sso.token.authentication.SSOAuthenticationProvider">
        <property name="ssoAuthApi">
            <ref bean="SSOAuthApi" />
        </property>
        <property name="roleMapper" ref="SSORoleMapper" />
        <pen:publish as-type="org.springframework.security.authentication.AuthenticationProvider">
          <pen:attributes>
            <pen:attr key="providerName" value="SSO"/>
          </pen:attributes>
        </pen:publish>
    </bean>

    <bean id="SSOUserDetailsService"
        class="com.pentaho.sample.sso.token.authentication.SSOUserDetailsService">
        <property name="ssoAuthApi">
            <ref bean="SSOAuthApi" />
        </property>
        <property name="roleMapper" ref="SSORoleMapper" />
        <constructor-arg ref="tenantedUserNameUtils"/>		
        <pen:publish as-type="INTERFACES">
          <pen:attributes>
            <pen:attr key="providerName" value="SSO"/>
          </pen:attributes>
        </pen:publish>
    </bean>

    <bean id="SSOProcessingFilter"
        class="com.pentaho.sample.sso.token.authentication.SSOProcessingFilter">
        <property name="authenticationManager">
            <ref bean="authenticationManager" />
        </property>
        <property name="authenticationEntryPoint">
            <ref bean="SSOProcessingFilterEntryPoint" />
        </property>
        <property name="lenient" value="false" />
        <property name="parameterName" value="authToken" />
    </bean>

    <bean id="SSOProcessingFilterEntryPoint"
        class="com.pentaho.sample.sso.token.authentication.SSOProcessingFilterEntryPoint" />
        
    <bean id="memoryPasswordEncoder"
        class="org.springframework.security.authentication.encoding.PlaintextPasswordEncoder" />
        
        
    <!-- =====  Overwrite to swap system and SSO.  A composite bean composed of the activeUserDetailsService and systemUserDetailsService -->
  <bean id="UserDetailsService" class="org.pentaho.platform.plugin.services.security.userrole.ChainedUserDetailsService">
    <constructor-arg>
      <list>
        <ref bean="systemUserDetailsService"/>
        <ref bean="SSOUserDetailsService"/>
      </list>
    </constructor-arg>
  </bean>


<!-- ======= Overwrite to add SSO and change strategy to additive.  A composite bean composed of the activeUserRoleListService and systemUserRoleListService -->
  <bean id="IUserRoleListService" class="org.pentaho.platform.plugin.services.security.userrole.CompositeUserRoleListService">
    <constructor-arg>
      <list>
        <ref bean="SSOUserRoleListService"/> 
        <ref bean="systemUserRoleListService"/>
      </list>
    </constructor-arg>
	<property name="strategy" value="ADDITIVE" />
    <pen:publish as-type="INTERFACES">
      <pen:attributes>
        <pen:attr key="priority" value="50"/>
      </pen:attributes>
    </pen:publish>
  </bean>    

</beans>
